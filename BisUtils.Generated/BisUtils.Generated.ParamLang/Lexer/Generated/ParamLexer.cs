//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/BisUtils/BisUtils.Generated/BisUtils.Generated.ParamLang\ParamLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BisUtils.Generated.ParamLang;
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParamLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		WHITESPACES=4, Enum=5, Class=6, Delete=7, Add_Assign=8, Sub_Assign=9, 
		Assign=10, LSBracket=11, RSBracket=12, LCBracket=13, RCBracket=14, Semicolon=15, 
		Colon=16, Comma=17, DoubleQuote=18, Identifier=19, LiteralString=20, LiteralInteger=21, 
		LiteralFloat=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"WHITESPACES", "Enum", "Class", "Delete", "Add_Assign", "Sub_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", "LiteralInteger", 
		"LiteralFloat", "Number", "DecimalNumber", "ScientificNumber", "AnyNumber"
	};


	public ParamLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParamLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'enum'", "'class'", "'delete'", "'+='", 
		"'-='", "'='", "'['", "']'", "'{'", "'}'", "';'", "':'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"WHITESPACES", "Enum", "Class", "Delete", "Add_Assign", "Sub_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", "LiteralInteger", 
		"LiteralFloat"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParamLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,183,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,5,0,58,8,
		0,10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,1,
		1,1,1,2,1,2,1,2,1,2,5,2,80,8,2,10,2,12,2,83,9,2,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,5,
		18,138,8,18,10,18,12,18,141,9,18,1,19,1,19,1,19,1,19,5,19,147,8,19,10,
		19,12,19,150,9,19,1,19,1,19,1,20,1,20,1,21,1,21,3,21,158,8,21,1,22,3,22,
		161,8,22,1,22,4,22,164,8,22,11,22,12,22,165,1,23,1,23,1,23,4,23,171,8,
		23,11,23,12,23,172,1,24,1,24,1,24,1,24,1,24,1,25,1,25,3,25,182,8,25,1,
		81,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,0,47,0,49,0,51,
		0,1,0,8,2,0,10,10,13,13,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,
		0,48,57,65,90,95,95,97,122,1,0,34,34,1,0,48,57,2,0,69,69,101,101,2,0,43,
		43,45,45,189,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,1,53,1,0,0,0,3,71,1,0,0,0,5,75,1,0,0,0,7,89,1,0,0,0,9,93,1,0,0,
		0,11,98,1,0,0,0,13,104,1,0,0,0,15,111,1,0,0,0,17,114,1,0,0,0,19,117,1,
		0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,0,0,0,27,125,1,0,0,0,29,127,
		1,0,0,0,31,129,1,0,0,0,33,131,1,0,0,0,35,133,1,0,0,0,37,135,1,0,0,0,39,
		142,1,0,0,0,41,153,1,0,0,0,43,157,1,0,0,0,45,160,1,0,0,0,47,167,1,0,0,
		0,49,174,1,0,0,0,51,181,1,0,0,0,53,54,5,47,0,0,54,55,5,47,0,0,55,59,1,
		0,0,0,56,58,8,0,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,
		0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,6,0,0,0,63,2,1,0,0,0,64,65,5,47,
		0,0,65,66,5,42,0,0,66,72,5,47,0,0,67,68,5,47,0,0,68,69,5,42,0,0,69,70,
		5,42,0,0,70,72,5,47,0,0,71,64,1,0,0,0,71,67,1,0,0,0,72,73,1,0,0,0,73,74,
		6,1,0,0,74,4,1,0,0,0,75,76,5,47,0,0,76,77,5,42,0,0,77,81,1,0,0,0,78,80,
		9,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,82,1,0,0,0,81,79,1,0,0,0,82,84,
		1,0,0,0,83,81,1,0,0,0,84,85,5,42,0,0,85,86,5,47,0,0,86,87,1,0,0,0,87,88,
		6,2,0,0,88,6,1,0,0,0,89,90,7,1,0,0,90,91,1,0,0,0,91,92,6,3,0,0,92,8,1,
		0,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,96,5,117,0,0,96,97,5,109,0,0,
		97,10,1,0,0,0,98,99,5,99,0,0,99,100,5,108,0,0,100,101,5,97,0,0,101,102,
		5,115,0,0,102,103,5,115,0,0,103,12,1,0,0,0,104,105,5,100,0,0,105,106,5,
		101,0,0,106,107,5,108,0,0,107,108,5,101,0,0,108,109,5,116,0,0,109,110,
		5,101,0,0,110,14,1,0,0,0,111,112,5,43,0,0,112,113,5,61,0,0,113,16,1,0,
		0,0,114,115,5,45,0,0,115,116,5,61,0,0,116,18,1,0,0,0,117,118,5,61,0,0,
		118,20,1,0,0,0,119,120,5,91,0,0,120,22,1,0,0,0,121,122,5,93,0,0,122,24,
		1,0,0,0,123,124,5,123,0,0,124,26,1,0,0,0,125,126,5,125,0,0,126,28,1,0,
		0,0,127,128,5,59,0,0,128,30,1,0,0,0,129,130,5,58,0,0,130,32,1,0,0,0,131,
		132,5,44,0,0,132,34,1,0,0,0,133,134,5,34,0,0,134,36,1,0,0,0,135,139,7,
		2,0,0,136,138,7,3,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,
		139,140,1,0,0,0,140,38,1,0,0,0,141,139,1,0,0,0,142,148,5,34,0,0,143,144,
		5,34,0,0,144,147,5,34,0,0,145,147,8,4,0,0,146,143,1,0,0,0,146,145,1,0,
		0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,
		148,1,0,0,0,151,152,5,34,0,0,152,40,1,0,0,0,153,154,3,45,22,0,154,42,1,
		0,0,0,155,158,3,47,23,0,156,158,3,49,24,0,157,155,1,0,0,0,157,156,1,0,
		0,0,158,44,1,0,0,0,159,161,5,45,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,
		163,1,0,0,0,162,164,7,5,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,
		0,0,0,165,166,1,0,0,0,166,46,1,0,0,0,167,168,3,45,22,0,168,170,5,46,0,
		0,169,171,7,5,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,
		173,1,0,0,0,173,48,1,0,0,0,174,175,3,51,25,0,175,176,7,6,0,0,176,177,7,
		7,0,0,177,178,3,51,25,0,178,50,1,0,0,0,179,182,3,47,23,0,180,182,3,45,
		22,0,181,179,1,0,0,0,181,180,1,0,0,0,182,52,1,0,0,0,12,0,59,71,81,139,
		146,148,157,160,165,172,181,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
