//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryannkelly/Desktop/BisUtils/BisUtils.Generated/BisUtils.Generated.PreProcessor/PreProcParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BisUtils.Generated.PreProcessor;
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PreProcParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface IPreProcParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.preprocessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessor([NotNull] PreProcParser.PreprocessorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.preprocessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessor([NotNull] PreProcParser.PreprocessorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterText([NotNull] PreProcParser.TextContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitText([NotNull] PreProcParser.TextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.lineMacro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLineMacro([NotNull] PreProcParser.LineMacroContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.lineMacro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLineMacro([NotNull] PreProcParser.LineMacroContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.fileMacro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFileMacro([NotNull] PreProcParser.FileMacroContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.fileMacro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFileMacro([NotNull] PreProcParser.FileMacroContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirective([NotNull] PreProcParser.DirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirective([NotNull] PreProcParser.DirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.ifdefDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfdefDirective([NotNull] PreProcParser.IfdefDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.ifdefDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfdefDirective([NotNull] PreProcParser.IfdefDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.ifndefDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfndefDirective([NotNull] PreProcParser.IfndefDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.ifndefDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfndefDirective([NotNull] PreProcParser.IfndefDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.elseDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseDirective([NotNull] PreProcParser.ElseDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.elseDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseDirective([NotNull] PreProcParser.ElseDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.endIfDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEndIfDirective([NotNull] PreProcParser.EndIfDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.endIfDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEndIfDirective([NotNull] PreProcParser.EndIfDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorConstant</c>
	/// labeled alternative in <see cref="PreProcParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConstant([NotNull] PreProcParser.PreprocessorConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorConstant</c>
	/// labeled alternative in <see cref="PreProcParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConstant([NotNull] PreProcParser.PreprocessorConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocessorMacro</c>
	/// labeled alternative in <see cref="PreProcParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorMacro([NotNull] PreProcParser.PreprocessorMacroContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocessorMacro</c>
	/// labeled alternative in <see cref="PreProcParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorMacro([NotNull] PreProcParser.PreprocessorMacroContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.preprocessor_macro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessor_macro([NotNull] PreProcParser.Preprocessor_macroContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.preprocessor_macro"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessor_macro([NotNull] PreProcParser.Preprocessor_macroContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.newLineOrEOF"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewLineOrEOF([NotNull] PreProcParser.NewLineOrEOFContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.newLineOrEOF"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewLineOrEOF([NotNull] PreProcParser.NewLineOrEOFContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreProcParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode([NotNull] PreProcParser.CodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreProcParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode([NotNull] PreProcParser.CodeContext context);
}
