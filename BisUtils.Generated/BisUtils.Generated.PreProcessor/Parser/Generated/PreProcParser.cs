//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryannkelly/Desktop/BisUtils/BisUtils.Generated/BisUtils.Generated.PreProcessor/PreProcParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BisUtils.Generated.PreProcessor;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class PreProcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, ENTER_MACRO_MODE=2, SINGLE_LINE_COMMENT=3, EMPTY_DELIMITED_COMMENT=4, 
		DELIMITED_COMMENT=5, CONCAT=6, CODE=7, LN_MACRO=8, FL_MACRO=9, LEAVE_MACRO_MODE=10, 
		DIRECTIVE_WHITESPACES=11, LSBracket=12, RSBracket=13, LParenthesis=14, 
		RParenthesis=15, Comma=16, UNDEFINE=17, DEFINE=18, INCLUDE=19, IF=20, 
		IFDEF=21, IFNDEF=22, ELSE=23, ENDIF=24, IDENTIFIER=25, LITERAL_INT=26, 
		LITERAL_FLOAT=27, LITERAL_STRING=28, NEW_LINE=29, DIRECITVE_NEW_LINE=30;
	public const int
		RULE_preprocessor = 0, RULE_text = 1, RULE_lineMacro = 2, RULE_fileMacro = 3, 
		RULE_directive = 4, RULE_ifdefDirective = 5, RULE_ifndefDirective = 6, 
		RULE_elseDirective = 7, RULE_endIfDirective = 8, RULE_preprocessor_expression = 9, 
		RULE_preprocessor_macro = 10, RULE_newLineOrEOF = 11, RULE_code = 12;
	public static readonly string[] ruleNames = {
		"preprocessor", "text", "lineMacro", "fileMacro", "directive", "ifdefDirective", 
		"ifndefDirective", "elseDirective", "endIfDirective", "preprocessor_expression", 
		"preprocessor_macro", "newLineOrEOF", "code"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, null, null, null, "'##'", null, "'LINE'", "'FILE'", 
		null, null, "'['", "']'", "'('", "')'", "','", "'undef'", "'define'", 
		"'include'", "'if'", "'ifdef'", "'ifndef'", "'else'", "'endif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "ENTER_MACRO_MODE", "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", 
		"DELIMITED_COMMENT", "CONCAT", "CODE", "LN_MACRO", "FL_MACRO", "LEAVE_MACRO_MODE", 
		"DIRECTIVE_WHITESPACES", "LSBracket", "RSBracket", "LParenthesis", "RParenthesis", 
		"Comma", "UNDEFINE", "DEFINE", "INCLUDE", "IF", "IFDEF", "IFNDEF", "ELSE", 
		"ENDIF", "IDENTIFIER", "LITERAL_INT", "LITERAL_FLOAT", "LITERAL_STRING", 
		"NEW_LINE", "DIRECITVE_NEW_LINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreProcParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PreProcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PreProcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PreProcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreprocessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PreProcParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public PreprocessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorContext preprocessor() {
		PreprocessorContext _localctx = new PreprocessorContext(Context, State);
		EnterRule(_localctx, 0, RULE_preprocessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SHARP) | (1L << ENTER_MACRO_MODE) | (1L << CODE))) != 0)) {
				{
				{
				State = 26;
				text();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineMacroContext lineMacro() {
			return GetRuleContext<LineMacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewLineOrEOFContext newLineOrEOF() {
			return GetRuleContext<NewLineOrEOFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileMacroContext fileMacro() {
			return GetRuleContext<FileMacroContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				code();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				directive();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				lineMacro();
				State = 39;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SHARP:
				case ENTER_MACRO_MODE:
				case CODE:
					{
					State = 37;
					text();
					}
					break;
				case Eof:
				case NEW_LINE:
					{
					State = 38;
					newLineOrEOF();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				fileMacro();
				State = 44;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SHARP:
				case ENTER_MACRO_MODE:
				case CODE:
					{
					State = 42;
					text();
					}
					break;
				case Eof:
				case NEW_LINE:
					{
					State = 43;
					newLineOrEOF();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTER_MACRO_MODE() { return GetToken(PreProcParser.ENTER_MACRO_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN_MACRO() { return GetToken(PreProcParser.LN_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE_MACRO_MODE() { return GetToken(PreProcParser.LEAVE_MACRO_MODE, 0); }
		public LineMacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMacro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterLineMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitLineMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMacroContext lineMacro() {
		LineMacroContext _localctx = new LineMacroContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineMacro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(ENTER_MACRO_MODE);
			State = 49;
			Match(LN_MACRO);
			State = 50;
			Match(LEAVE_MACRO_MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileMacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTER_MACRO_MODE() { return GetToken(PreProcParser.ENTER_MACRO_MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FL_MACRO() { return GetToken(PreProcParser.FL_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE_MACRO_MODE() { return GetToken(PreProcParser.LEAVE_MACRO_MODE, 0); }
		public FileMacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileMacro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterFileMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitFileMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileMacroContext fileMacro() {
		FileMacroContext _localctx = new FileMacroContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileMacro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(ENTER_MACRO_MODE);
			State = 53;
			Match(FL_MACRO);
			State = 54;
			Match(LEAVE_MACRO_MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(PreProcParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PreProcParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(PreProcParser.LITERAL_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewLineOrEOFContext newLineOrEOF() {
			return GetRuleContext<NewLineOrEOFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(PreProcParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_macroContext preprocessor_macro() {
			return GetRuleContext<Preprocessor_macroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINE() { return GetToken(PreProcParser.UNDEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PreProcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfdefDirectiveContext ifdefDirective() {
			return GetRuleContext<IfdefDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfndefDirectiveContext ifndefDirective() {
			return GetRuleContext<IfndefDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_directive);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				Match(SHARP);
				State = 57;
				Match(INCLUDE);
				State = 58;
				Match(LITERAL_STRING);
				State = 59;
				newLineOrEOF();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				Match(SHARP);
				State = 61;
				Match(DEFINE);
				State = 62;
				preprocessor_macro();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << LITERAL_INT) | (1L << LITERAL_FLOAT))) != 0)) {
					{
					State = 63;
					preprocessor_expression();
					}
				}

				State = 66;
				newLineOrEOF();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				Match(SHARP);
				State = 69;
				Match(UNDEFINE);
				State = 70;
				Match(IDENTIFIER);
				State = 71;
				newLineOrEOF();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				Match(SHARP);
				State = 73;
				ifdefDirective();
				State = 74;
				newLineOrEOF();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				Match(SHARP);
				State = 77;
				ifndefDirective();
				State = 78;
				newLineOrEOF();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfdefDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFDEF() { return GetToken(PreProcParser.IFDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PreProcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewLineOrEOFContext newLineOrEOF() {
			return GetRuleContext<NewLineOrEOFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseDirectiveContext elseDirective() {
			return GetRuleContext<ElseDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndIfDirectiveContext endIfDirective() {
			return GetRuleContext<EndIfDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public IfdefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifdefDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterIfdefDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitIfdefDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfdefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfdefDirectiveContext ifdefDirective() {
		IfdefDirectiveContext _localctx = new IfdefDirectiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifdefDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IFDEF);
			State = 83;
			Match(IDENTIFIER);
			State = 84;
			newLineOrEOF();
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 85;
					text();
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 91;
				elseDirective();
				}
				break;
			case 2:
				{
				State = 92;
				endIfDirective();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfndefDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNDEF() { return GetToken(PreProcParser.IFNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PreProcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewLineOrEOFContext newLineOrEOF() {
			return GetRuleContext<NewLineOrEOFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseDirectiveContext elseDirective() {
			return GetRuleContext<ElseDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndIfDirectiveContext endIfDirective() {
			return GetRuleContext<EndIfDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public IfndefDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifndefDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterIfndefDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitIfndefDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfndefDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfndefDirectiveContext ifndefDirective() {
		IfndefDirectiveContext _localctx = new IfndefDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifndefDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(IFNDEF);
			State = 96;
			Match(IDENTIFIER);
			State = 97;
			newLineOrEOF();
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98;
					text();
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 104;
				elseDirective();
				}
				break;
			case 2:
				{
				State = 105;
				endIfDirective();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(PreProcParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PreProcParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewLineOrEOFContext newLineOrEOF() {
			return GetRuleContext<NewLineOrEOFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndIfDirectiveContext endIfDirective() {
			return GetRuleContext<EndIfDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ElseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterElseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitElseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseDirectiveContext elseDirective() {
		ElseDirectiveContext _localctx = new ElseDirectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseDirective);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(SHARP);
			State = 109;
			Match(ELSE);
			State = 110;
			newLineOrEOF();
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 111;
					text();
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 117;
			endIfDirective();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(PreProcParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(PreProcParser.ENDIF, 0); }
		public EndIfDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterEndIfDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitEndIfDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfDirectiveContext endIfDirective() {
		EndIfDirectiveContext _localctx = new EndIfDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_endIfDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(SHARP);
			State = 120;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
	 
		public Preprocessor_expressionContext() { }
		public virtual void CopyFrom(Preprocessor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorMacroContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_macroContext preprocessor_macro() {
			return GetRuleContext<Preprocessor_macroContext>(0);
		}
		public PreprocessorMacroContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorMacro(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorConstantContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(PreProcParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INT() { return GetToken(PreProcParser.LITERAL_INT, 0); }
		public PreprocessorConstantContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_preprocessor_expression);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_FLOAT:
				_localctx = new PreprocessorConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(LITERAL_FLOAT);
				}
				break;
			case LITERAL_INT:
				_localctx = new PreprocessorConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				Match(LITERAL_INT);
				}
				break;
			case IDENTIFIER:
				_localctx = new PreprocessorMacroContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				preprocessor_macro();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_macroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PreProcParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(PreProcParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(PreProcParser.RParenthesis, 0); }
		public Preprocessor_macroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterPreprocessor_macro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitPreprocessor_macro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_macro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_macroContext preprocessor_macro() {
		Preprocessor_macroContext _localctx = new Preprocessor_macroContext(Context, State);
		EnterRule(_localctx, 20, RULE_preprocessor_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(IDENTIFIER);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParenthesis) {
				{
				State = 128;
				Match(LParenthesis);
				State = 129;
				preprocessor_expression();
				State = 130;
				Match(RParenthesis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewLineOrEOFContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(PreProcParser.NEW_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PreProcParser.Eof, 0); }
		public NewLineOrEOFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newLineOrEOF; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterNewLineOrEOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitNewLineOrEOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewLineOrEOF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewLineOrEOFContext newLineOrEOF() {
		NewLineOrEOFContext _localctx = new NewLineOrEOFContext(Context, State);
		EnterRule(_localctx, 22, RULE_newLineOrEOF);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEW_LINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CODE() { return GetTokens(PreProcParser.CODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE(int i) {
			return GetToken(PreProcParser.CODE, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreProcParserListener typedListener = listener as IPreProcParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreProcParserVisitor<TResult> typedVisitor = visitor as IPreProcParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 24, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 136;
					Match(CODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,30,142,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,1,1,1,1,1,3,1,45,
		8,1,3,1,47,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,65,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,3,4,81,8,4,1,5,1,5,1,5,1,5,5,5,87,8,5,10,5,12,5,90,9,5,1,5,1,5,3,5,
		94,8,5,1,6,1,6,1,6,1,6,5,6,100,8,6,10,6,12,6,103,9,6,1,6,1,6,3,6,107,8,
		6,1,7,1,7,1,7,1,7,5,7,113,8,7,10,7,12,7,116,9,7,1,7,1,7,1,8,1,8,1,8,1,
		9,1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,1,10,3,10,133,8,10,1,11,1,11,
		1,12,4,12,138,8,12,11,12,12,12,139,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,
		20,22,24,0,1,1,1,29,29,148,0,29,1,0,0,0,2,46,1,0,0,0,4,48,1,0,0,0,6,52,
		1,0,0,0,8,80,1,0,0,0,10,82,1,0,0,0,12,95,1,0,0,0,14,108,1,0,0,0,16,119,
		1,0,0,0,18,125,1,0,0,0,20,127,1,0,0,0,22,134,1,0,0,0,24,137,1,0,0,0,26,
		28,3,2,1,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,
		32,1,0,0,0,31,29,1,0,0,0,32,33,5,0,0,1,33,1,1,0,0,0,34,47,3,24,12,0,35,
		47,3,8,4,0,36,39,3,4,2,0,37,40,3,2,1,0,38,40,3,22,11,0,39,37,1,0,0,0,39,
		38,1,0,0,0,40,47,1,0,0,0,41,44,3,6,3,0,42,45,3,2,1,0,43,45,3,22,11,0,44,
		42,1,0,0,0,44,43,1,0,0,0,45,47,1,0,0,0,46,34,1,0,0,0,46,35,1,0,0,0,46,
		36,1,0,0,0,46,41,1,0,0,0,47,3,1,0,0,0,48,49,5,2,0,0,49,50,5,8,0,0,50,51,
		5,10,0,0,51,5,1,0,0,0,52,53,5,2,0,0,53,54,5,9,0,0,54,55,5,10,0,0,55,7,
		1,0,0,0,56,57,5,1,0,0,57,58,5,19,0,0,58,59,5,28,0,0,59,81,3,22,11,0,60,
		61,5,1,0,0,61,62,5,18,0,0,62,64,3,20,10,0,63,65,3,18,9,0,64,63,1,0,0,0,
		64,65,1,0,0,0,65,66,1,0,0,0,66,67,3,22,11,0,67,81,1,0,0,0,68,69,5,1,0,
		0,69,70,5,17,0,0,70,71,5,25,0,0,71,81,3,22,11,0,72,73,5,1,0,0,73,74,3,
		10,5,0,74,75,3,22,11,0,75,81,1,0,0,0,76,77,5,1,0,0,77,78,3,12,6,0,78,79,
		3,22,11,0,79,81,1,0,0,0,80,56,1,0,0,0,80,60,1,0,0,0,80,68,1,0,0,0,80,72,
		1,0,0,0,80,76,1,0,0,0,81,9,1,0,0,0,82,83,5,21,0,0,83,84,5,25,0,0,84,88,
		3,22,11,0,85,87,3,2,1,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,
		1,0,0,0,89,93,1,0,0,0,90,88,1,0,0,0,91,94,3,14,7,0,92,94,3,16,8,0,93,91,
		1,0,0,0,93,92,1,0,0,0,94,11,1,0,0,0,95,96,5,22,0,0,96,97,5,25,0,0,97,101,
		3,22,11,0,98,100,3,2,1,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,
		101,102,1,0,0,0,102,106,1,0,0,0,103,101,1,0,0,0,104,107,3,14,7,0,105,107,
		3,16,8,0,106,104,1,0,0,0,106,105,1,0,0,0,107,13,1,0,0,0,108,109,5,1,0,
		0,109,110,5,23,0,0,110,114,3,22,11,0,111,113,3,2,1,0,112,111,1,0,0,0,113,
		116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,
		0,0,0,117,118,3,16,8,0,118,15,1,0,0,0,119,120,5,1,0,0,120,121,5,24,0,0,
		121,17,1,0,0,0,122,126,5,27,0,0,123,126,5,26,0,0,124,126,3,20,10,0,125,
		122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,19,1,0,0,0,127,132,5,25,
		0,0,128,129,5,14,0,0,129,130,3,18,9,0,130,131,5,15,0,0,131,133,1,0,0,0,
		132,128,1,0,0,0,132,133,1,0,0,0,133,21,1,0,0,0,134,135,7,0,0,0,135,23,
		1,0,0,0,136,138,5,7,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,
		0,139,140,1,0,0,0,140,25,1,0,0,0,14,29,39,44,46,64,80,88,93,101,106,114,
		125,132,139
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
