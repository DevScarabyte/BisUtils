//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryannkelly/Desktop/BisUtils/BisUtils.Generated/BisUtils.Generated.EnScript/EnScriptParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BisUtils.Generated.EnScript;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		WHITESPACES=4, CLASS=5, ENUM=6, SWITCH=7, EXTENDS=8, CONST=9, BREAK=10, 
		CASE=11, ELSE=12, FOR=13, CONTINUE=14, FOREACH=15, IF=16, NEW=17, RETURN=18, 
		THIS=19, THREAD=20, VOID=21, WHILE=22, AUTOPTR=23, AUTO=24, REF=25, NULL=26, 
		NOTNULL=27, NATIVE=28, VOLATILE=29, PROTO=30, STATIC=31, OWNED=32, REFERENCE=33, 
		OUT=34, PROTECTED=35, EVENT=36, TYPEDEF=37, MODDED=38, OVERRIDE=39, SEALED=40, 
		INOUT=41, SUPER=42, POINTER=43, GOTO=44, PRIVATE=45, EXTERNAL=46, DELETE=47, 
		LOCAL=48, DEFAULT=49, Increment=50, Decrement=51, LShift_Assign=52, RShift_Assign=53, 
		Subtract_Assign=54, Add_Assign=55, Multiply_Assign=56, Divide_Assign=57, 
		Or_Assign=58, Xor_Assign=59, LessEqual=60, GreaterEqual=61, And_Assign=62, 
		Inequal=63, Equal=64, LogicalOr=65, LogicalAnd=66, BitwiseOr=67, BitwiseXor=68, 
		BitwiseAnd=69, BitwiseNot=70, Greater=71, Less=72, Assign=73, Subtract=74, 
		Add=75, Multiply=76, Divide=77, LParenthesis=78, RParenthesis=79, LCurly=80, 
		RCurly=81, Comma=82, Colon=83, Semicolon=84, LSBracket=85, RSBracket=86, 
		Dot=87, Bang=88, DoubleQuote=89, SingleQuote=90, Modulo=91, IDENTIFIER=92, 
		PREPROC_LINE=93, PREPROC_FILE=94, LiteralString=95, LiteralInteger=96, 
		LiteralFloat=97, LiteralBoolean=98;
	public const int
		RULE_computationalStart = 0, RULE_typeDeclaration = 1, RULE_globalDeclaration = 2, 
		RULE_globalInheritance = 3, RULE_enumDeclaration = 4, RULE_enumBody = 5, 
		RULE_enumMember = 6, RULE_classDeclaration = 7, RULE_classBody = 8, RULE_funcOrVar = 9, 
		RULE_funcVarOrDeconstructor = 10, RULE_variableDeclaration = 11, RULE_variableDeclarator = 12, 
		RULE_undefinedVariableDeclarator = 13, RULE_definedVariableDeclarator = 14, 
		RULE_functionDeclaration = 15, RULE_deconstructorDeclaration = 16, RULE_functionDeclarationParameters = 17, 
		RULE_functionDeclarationDefinedParameter = 18, RULE_functionDeclarationUndefinedParameter = 19, 
		RULE_functionBody = 20, RULE_encapsulatedFunctionBody = 21, RULE_functionCall = 22, 
		RULE_functionCallParameters = 23, RULE_functionCallParameter = 24, RULE_attribute = 25, 
		RULE_statement = 26, RULE_primaryStatement = 27, RULE_foreachStatement = 28, 
		RULE_foreachControl = 29, RULE_forStatement = 30, RULE_forControl = 31, 
		RULE_ifStatement = 32, RULE_elseStatement = 33, RULE_objectCreation = 34, 
		RULE_whileStatement = 35, RULE_threadStatement = 36, RULE_gotoStatement = 37, 
		RULE_deleteStatement = 38, RULE_lambdaStatement = 39, RULE_breakStatement = 40, 
		RULE_continueStatement = 41, RULE_returnStatement = 42, RULE_switchStatement = 43, 
		RULE_switchLabel = 44, RULE_defaultSwitchLabel = 45, RULE_expression = 46, 
		RULE_primaryExpression = 47, RULE_negatedExpression = 48, RULE_parenthesisedExpression = 49, 
		RULE_arrayIndex = 50, RULE_literalString = 51, RULE_literalBoolean = 52, 
		RULE_literalNull = 53, RULE_literalArray = 54, RULE_literalNumeric = 55, 
		RULE_literalFloat = 56, RULE_literalInteger = 57, RULE_identifier = 58, 
		RULE_genericTypeDeclarationList = 59, RULE_genericTypeDeclaration = 60, 
		RULE_genericTypedReference = 61, RULE_typeReference = 62, RULE_typeModifier = 63, 
		RULE_sharedFuncOrVarModifiers = 64, RULE_variableModifier = 65, RULE_functionModifier = 66;
	public static readonly string[] ruleNames = {
		"computationalStart", "typeDeclaration", "globalDeclaration", "globalInheritance", 
		"enumDeclaration", "enumBody", "enumMember", "classDeclaration", "classBody", 
		"funcOrVar", "funcVarOrDeconstructor", "variableDeclaration", "variableDeclarator", 
		"undefinedVariableDeclarator", "definedVariableDeclarator", "functionDeclaration", 
		"deconstructorDeclaration", "functionDeclarationParameters", "functionDeclarationDefinedParameter", 
		"functionDeclarationUndefinedParameter", "functionBody", "encapsulatedFunctionBody", 
		"functionCall", "functionCallParameters", "functionCallParameter", "attribute", 
		"statement", "primaryStatement", "foreachStatement", "foreachControl", 
		"forStatement", "forControl", "ifStatement", "elseStatement", "objectCreation", 
		"whileStatement", "threadStatement", "gotoStatement", "deleteStatement", 
		"lambdaStatement", "breakStatement", "continueStatement", "returnStatement", 
		"switchStatement", "switchLabel", "defaultSwitchLabel", "expression", 
		"primaryExpression", "negatedExpression", "parenthesisedExpression", "arrayIndex", 
		"literalString", "literalBoolean", "literalNull", "literalArray", "literalNumeric", 
		"literalFloat", "literalInteger", "identifier", "genericTypeDeclarationList", 
		"genericTypeDeclaration", "genericTypedReference", "typeReference", "typeModifier", 
		"sharedFuncOrVarModifiers", "variableModifier", "functionModifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'class'", "'enum'", "'switch'", "'extends'", 
		"'const'", "'break'", "'case'", "'else'", "'for'", "'contine'", "'foreach'", 
		"'if'", "'new'", "'return'", "'this'", "'thread'", "'void'", "'while'", 
		"'autoptr'", "'auto'", "'ref'", "'null'", "'notnull'", "'native'", "'volatile'", 
		"'proto'", "'static'", "'owned'", "'reference'", "'out'", "'protected'", 
		"'event'", "'typedef'", "'modded'", "'override'", "'sealed'", "'inout'", 
		"'super'", "'pointer'", "'goto'", "'private'", "'external'", "'delete'", 
		"'local'", "'default'", "'++'", "'--'", "'<<='", "'>>='", "'-='", "'+='", 
		"'*='", "'/='", "'|='", "'^='", "'<='", "'>='", "'&='", "'!='", "'=='", 
		"'||'", "'&&'", "'|'", "'^'", "'&'", "'~'", "'>'", "'<'", "'='", "'-'", 
		"'+'", "'*'", "'/'", "'('", "')'", "'{'", "'}'", "','", "':'", "';'", 
		"'['", "']'", "'.'", "'!'", "'\"'", "'''", "'%'", null, "'__LINE__'", 
		"'__FILE__'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"WHITESPACES", "CLASS", "ENUM", "SWITCH", "EXTENDS", "CONST", "BREAK", 
		"CASE", "ELSE", "FOR", "CONTINUE", "FOREACH", "IF", "NEW", "RETURN", "THIS", 
		"THREAD", "VOID", "WHILE", "AUTOPTR", "AUTO", "REF", "NULL", "NOTNULL", 
		"NATIVE", "VOLATILE", "PROTO", "STATIC", "OWNED", "REFERENCE", "OUT", 
		"PROTECTED", "EVENT", "TYPEDEF", "MODDED", "OVERRIDE", "SEALED", "INOUT", 
		"SUPER", "POINTER", "GOTO", "PRIVATE", "EXTERNAL", "DELETE", "LOCAL", 
		"DEFAULT", "Increment", "Decrement", "LShift_Assign", "RShift_Assign", 
		"Subtract_Assign", "Add_Assign", "Multiply_Assign", "Divide_Assign", "Or_Assign", 
		"Xor_Assign", "LessEqual", "GreaterEqual", "And_Assign", "Inequal", "Equal", 
		"LogicalOr", "LogicalAnd", "BitwiseOr", "BitwiseXor", "BitwiseAnd", "BitwiseNot", 
		"Greater", "Less", "Assign", "Subtract", "Add", "Multiply", "Divide", 
		"LParenthesis", "RParenthesis", "LCurly", "RCurly", "Comma", "Colon", 
		"Semicolon", "LSBracket", "RSBracket", "Dot", "Bang", "DoubleQuote", "SingleQuote", 
		"Modulo", "IDENTIFIER", "PREPROC_LINE", "PREPROC_FILE", "LiteralString", 
		"LiteralInteger", "LiteralFloat", "LiteralBoolean"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncOrVarContext[] funcOrVar() {
			return GetRuleContexts<FuncOrVarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncOrVarContext funcOrVar(int i) {
			return GetRuleContext<FuncOrVarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationalStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << TYPEDEF) | (1L << MODDED) | (1L << OVERRIDE) | (1L << SEALED) | (1L << INOUT) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << LOCAL))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
				{
				State = 137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 134;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 135;
					funcOrVar();
					}
					break;
				case 3:
					{
					State = 136;
					typeDeclaration();
					}
					break;
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnScriptParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(TYPEDEF);
			State = 145;
			typeReference();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 146;
				arrayIndex();
				}
			}

			State = 149;
			identifier();
			State = 150;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifierContext[] typeModifier() {
			return GetRuleContexts<TypeModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifierContext typeModifier(int i) {
			return GetRuleContext<TypeModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_globalDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 152;
				attribute();
				}
			}

			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODDED || _la==SEALED) {
				{
				{
				State = 155;
				typeModifier();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 161;
				classDeclaration();
				}
				break;
			case ENUM:
				{
				State = 162;
				enumDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 165;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalInheritanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(EnScriptParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public GlobalInheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalInheritance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGlobalInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGlobalInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalInheritanceContext globalInheritance() {
		GlobalInheritanceContext _localctx = new GlobalInheritanceContext(Context, State);
		EnterRule(_localctx, 6, RULE_globalInheritance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDS || _la==Colon) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 169;
			typeReference();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 170;
				Match(Comma);
				State = 171;
				typeReference();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnScriptParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalInheritanceContext globalInheritance() {
			return GetRuleContext<GlobalInheritanceContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(ENUM);
			State = 178;
			identifier();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 179;
				globalInheritance();
				}
			}

			State = 182;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnScriptParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnScriptParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_enumBody);
		int _la;
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				enumMember();
				}
				break;
			case LCurly:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(LCurly);
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VOID || _la==IDENTIFIER) {
					{
					{
					State = 186;
					enumMember();
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 192;
					Match(Comma);
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 198;
				Match(RCurly);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 12, RULE_enumMember);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			identifier();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 202;
				Match(Assign);
				State = 203;
				expression(0);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 206;
					Match(Comma);
					State = 207;
					enumMember();
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnScriptParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationListContext genericTypeDeclarationList() {
			return GetRuleContext<GenericTypeDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalInheritanceContext globalInheritance() {
			return GetRuleContext<GlobalInheritanceContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(CLASS);
			State = 214;
			identifier();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less) {
				{
				State = 215;
				genericTypeDeclarationList();
				}
			}

			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==Colon) {
				{
				State = 218;
				globalInheritance();
				}
			}

			State = 221;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncVarOrDeconstructorContext[] funcVarOrDeconstructor() {
			return GetRuleContexts<FuncVarOrDeconstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncVarOrDeconstructorContext funcVarOrDeconstructor(int i) {
			return GetRuleContext<FuncVarOrDeconstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnScriptParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnScriptParser.RCurly, 0); }
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_classBody);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case VOID:
			case AUTOPTR:
			case REF:
			case NOTNULL:
			case NATIVE:
			case VOLATILE:
			case PROTO:
			case STATIC:
			case OWNED:
			case REFERENCE:
			case OUT:
			case PROTECTED:
			case EVENT:
			case OVERRIDE:
			case INOUT:
			case PRIVATE:
			case EXTERNAL:
			case LOCAL:
			case LSBracket:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 223;
				funcVarOrDeconstructor();
				}
				}
				break;
			case LCurly:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 224;
				Match(LCurly);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << INOUT) | (1L << PRIVATE) | (1L << EXTERNAL) | (1L << LOCAL))) != 0) || _la==LSBracket || _la==IDENTIFIER) {
					{
					{
					State = 225;
					funcVarOrDeconstructor();
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 231;
				Match(RCurly);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncOrVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public FuncOrVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcOrVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFuncOrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFuncOrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncOrVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncOrVarContext funcOrVar() {
		FuncOrVarContext _localctx = new FuncOrVarContext(Context, State);
		EnterRule(_localctx, 18, RULE_funcOrVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 234;
				attribute();
				}
			}

			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 237;
				functionDeclaration();
				}
				break;
			case 2:
				{
				State = 238;
				variableDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncVarOrDeconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncOrVarContext funcOrVar() {
			return GetRuleContext<FuncOrVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructorDeclarationContext deconstructorDeclaration() {
			return GetRuleContext<DeconstructorDeclarationContext>(0);
		}
		public FuncVarOrDeconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcVarOrDeconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFuncVarOrDeconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFuncVarOrDeconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncVarOrDeconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncVarOrDeconstructorContext funcVarOrDeconstructor() {
		FuncVarOrDeconstructorContext _localctx = new FuncVarOrDeconstructorContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcVarOrDeconstructor);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				funcOrVar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				deconstructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 245;
				variableModifier();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251;
			typeReference();
			State = 252;
			variableDeclarator();
			State = 253;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclaratorContext definedVariableDeclarator() {
			return GetRuleContext<DefinedVariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclaratorContext undefinedVariableDeclarator() {
			return GetRuleContext<UndefinedVariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			identifier();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 256;
				arrayIndex();
				}
			}

			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				{
				State = 259;
				definedVariableDeclarator();
				}
				break;
			case Comma:
			case Semicolon:
				{
				State = 260;
				undefinedVariableDeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclaratorContext[] undefinedVariableDeclarator() {
			return GetRuleContexts<UndefinedVariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclaratorContext undefinedVariableDeclarator(int i) {
			return GetRuleContext<UndefinedVariableDeclaratorContext>(i);
		}
		public UndefinedVariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterUndefinedVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitUndefinedVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefinedVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclaratorContext undefinedVariableDeclarator() {
		UndefinedVariableDeclaratorContext _localctx = new UndefinedVariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 26, RULE_undefinedVariableDeclarator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 263;
					Match(Comma);
					State = 264;
					undefinedVariableDeclarator();
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclaratorContext[] definedVariableDeclarator() {
			return GetRuleContexts<DefinedVariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclaratorContext definedVariableDeclarator(int i) {
			return GetRuleContext<DefinedVariableDeclaratorContext>(i);
		}
		public DefinedVariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterDefinedVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitDefinedVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedVariableDeclaratorContext definedVariableDeclarator() {
		DefinedVariableDeclaratorContext _localctx = new DefinedVariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_definedVariableDeclarator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 270;
			Match(Assign);
			State = 271;
			expression(0);
			}
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					Match(Comma);
					State = 274;
					definedVariableDeclarator();
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationParametersContext[] functionDeclarationParameters() {
			return GetRuleContexts<FunctionDeclarationParametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationParametersContext functionDeclarationParameters(int i) {
			return GetRuleContext<FunctionDeclarationParametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) {
				{
				{
				State = 280;
				functionModifier();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			typeReference();
			State = 287;
			identifier();
			State = 288;
			Match(LParenthesis);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << VOID) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0) || _la==IDENTIFIER) {
				{
				State = 289;
				functionDeclarationParameters();
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 290;
					Match(Comma);
					State = 291;
					functionDeclarationParameters();
					}
					}
					State = 296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 299;
			Match(RParenthesis);
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				{
				State = 300;
				functionBody();
				State = 302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 301;
					Match(Semicolon);
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 304;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnScriptParser.BitwiseNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public DeconstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterDeconstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitDeconstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeconstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructorDeclarationContext deconstructorDeclaration() {
		DeconstructorDeclarationContext _localctx = new DeconstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_deconstructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << NATIVE) | (1L << VOLATILE) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << PROTECTED) | (1L << EVENT) | (1L << OVERRIDE) | (1L << PRIVATE) | (1L << EXTERNAL))) != 0)) {
				{
				{
				State = 307;
				functionModifier();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			typeReference();
			State = 314;
			Match(BitwiseNot);
			State = 315;
			identifier();
			State = 316;
			Match(LParenthesis);
			State = 317;
			Match(RParenthesis);
			State = 318;
			functionBody();
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 319;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationUndefinedParameterContext functionDeclarationUndefinedParameter() {
			return GetRuleContext<FunctionDeclarationUndefinedParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationDefinedParameterContext functionDeclarationDefinedParameter() {
			return GetRuleContext<FunctionDeclarationDefinedParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FunctionDeclarationParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationParametersContext functionDeclarationParameters() {
		FunctionDeclarationParametersContext _localctx = new FunctionDeclarationParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionDeclarationParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 322;
				variableModifier();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			typeReference();
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 329;
				functionDeclarationUndefinedParameter();
				}
				break;
			case 2:
				{
				State = 330;
				functionDeclarationDefinedParameter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationDefinedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclaratorContext definedVariableDeclarator() {
			return GetRuleContext<DefinedVariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public FunctionDeclarationDefinedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationDefinedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationDefinedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationDefinedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationDefinedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationDefinedParameterContext functionDeclarationDefinedParameter() {
		FunctionDeclarationDefinedParameterContext _localctx = new FunctionDeclarationDefinedParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDeclarationDefinedParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 333;
			identifier();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 334;
				arrayIndex();
				}
			}

			State = 337;
			definedVariableDeclarator();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationUndefinedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclaratorContext undefinedVariableDeclarator() {
			return GetRuleContext<UndefinedVariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public FunctionDeclarationUndefinedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationUndefinedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationUndefinedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationUndefinedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationUndefinedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationUndefinedParameterContext functionDeclarationUndefinedParameter() {
		FunctionDeclarationUndefinedParameterContext _localctx = new FunctionDeclarationUndefinedParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDeclarationUndefinedParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 339;
			identifier();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBracket) {
				{
				State = 340;
				arrayIndex();
				}
			}

			State = 343;
			undefinedVariableDeclarator();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncapsulatedFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnScriptParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnScriptParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EncapsulatedFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encapsulatedFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterEncapsulatedFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitEncapsulatedFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncapsulatedFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncapsulatedFunctionBodyContext encapsulatedFunctionBody() {
		EncapsulatedFunctionBodyContext _localctx = new EncapsulatedFunctionBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_encapsulatedFunctionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(LCurly);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Semicolon - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				{
				State = 348;
				statement();
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 354;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			identifier();
			State = 357;
			functionCallParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext functionCallParameter() {
			return GetRuleContext<FunctionCallParameterContext>(0);
		}
		public FunctionCallParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParametersContext functionCallParameters() {
		FunctionCallParametersContext _localctx = new FunctionCallParametersContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionCallParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(LParenthesis);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << NULL) | (1L << SUPER) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				State = 360;
				functionCallParameter();
				}
			}

			State = 363;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext[] functionCallParameter() {
			return GetRuleContexts<FunctionCallParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParameterContext functionCallParameter(int i) {
			return GetRuleContext<FunctionCallParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallParameterContext functionCallParameter() {
		FunctionCallParameterContext _localctx = new FunctionCallParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionCallParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				{
				State = 365;
				identifier();
				State = 366;
				Match(Colon);
				State = 367;
				expression(0);
				}
				}
				break;
			case 2:
				{
				{
				State = 369;
				expression(0);
				}
				}
				break;
			}
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 372;
					Match(Comma);
					State = 373;
					functionCallParameter();
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnScriptParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnScriptParser.RSBracket, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(LSBracket);
			State = 380;
			functionCall();
			State = 381;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryStatementContext primaryStatement() {
			return GetRuleContext<PrimaryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadStatementContext threadStatement() {
			return GetRuleContext<ThreadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaStatementContext lambdaStatement() {
			return GetRuleContext<LambdaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_statement);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				primaryStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				deleteStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385;
				threadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386;
				gotoStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 387;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 388;
				forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 389;
				foreachStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 390;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 391;
				continueStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 392;
				returnStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 393;
				switchStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 394;
				lambdaStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 395;
				whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EncapsulatedFunctionBodyContext encapsulatedFunctionBody() {
			return GetRuleContext<EncapsulatedFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public PrimaryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterPrimaryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitPrimaryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryStatementContext primaryStatement() {
		PrimaryStatementContext _localctx = new PrimaryStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_primaryStatement);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				expression(0);
				State = 399;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				encapsulatedFunctionBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnScriptParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachControlContext foreachControl() {
			return GetRuleContext<ForeachControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(FOREACH);
			State = 407;
			Match(LParenthesis);
			State = 408;
			foreachControl();
			State = 409;
			Match(Colon);
			State = 410;
			expression(0);
			State = 411;
			Match(RParenthesis);
			State = 412;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(EnScriptParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachControlContext foreachControl() {
			return GetRuleContext<ForeachControlContext>(0);
		}
		public ForeachControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterForeachControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitForeachControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachControlContext foreachControl() {
		ForeachControlContext _localctx = new ForeachControlContext(Context, State);
		EnterRule(_localctx, 58, RULE_foreachControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 414;
				variableModifier();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 420;
			typeReference();
			State = 421;
			identifier();
			State = 422;
			arrayIndex();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 423;
				Match(Comma);
				State = 424;
				foreachControl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnScriptParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(FOR);
			State = 428;
			Match(LParenthesis);
			State = 429;
			forControl();
			State = 430;
			Match(RParenthesis);
			State = 431;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(EnScriptParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(EnScriptParser.Semicolon, i);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 62, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			statement();
			State = 434;
			expression(0);
			State = 435;
			Match(Semicolon);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << NULL) | (1L << SUPER) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				State = 436;
				expression(0);
				}
			}

			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Semicolon) {
				{
				{
				State = 439;
				Match(Semicolon);
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnScriptParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(IF);
			State = 446;
			parenthesisedExpression();
			State = 447;
			functionBody();
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 448;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnScriptParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(ELSE);
			State = 452;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnScriptParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 68, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(NEW);
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 455;
				variableModifier();
				}
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 461;
			typeReference();
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 462;
				functionCallParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(WHILE);
			State = 466;
			parenthesisedExpression();
			State = 467;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(EnScriptParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public ThreadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterThreadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitThreadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadStatementContext threadStatement() {
		ThreadStatementContext _localctx = new ThreadStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_threadStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(THREAD);
			State = 470;
			functionCall();
			State = 471;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(EnScriptParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(GOTO);
			State = 474;
			expression(0);
			State = 475;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnScriptParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(DELETE);
			State = 478;
			expression(0);
			State = 479;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallParametersContext functionCallParameters() {
			return GetRuleContext<FunctionCallParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public LambdaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLambdaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLambdaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaStatementContext lambdaStatement() {
		LambdaStatementContext _localctx = new LambdaStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_lambdaStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			typeReference();
			State = 482;
			identifier();
			State = 483;
			functionCallParameters();
			State = 484;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnScriptParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(BREAK);
			State = 487;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnScriptParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(CONTINUE);
			State = 490;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnScriptParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(EnScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(RETURN);
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << NULL) | (1L << SUPER) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				State = 493;
				expression(0);
				}
			}

			State = 496;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnScriptParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnScriptParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnScriptParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultSwitchLabelContext defaultSwitchLabel() {
			return GetRuleContext<DefaultSwitchLabelContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(SWITCH);
			State = 499;
			parenthesisedExpression();
			State = 500;
			Match(LCurly);
			State = 504;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 501;
					switchLabel();
					}
					} 
				}
				State = 506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 507;
				defaultSwitchLabel();
				}
			}

			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 510;
				switchLabel();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 516;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnScriptParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(CASE);
			State = 519;
			expression(0);
			State = 520;
			Match(Colon);
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Semicolon - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				{
				State = 521;
				statement();
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultSwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnScriptParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(EnScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultSwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultSwitchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultSwitchLabelContext defaultSwitchLabel() {
		DefaultSwitchLabelContext _localctx = new DefaultSwitchLabelContext(Context, State);
		EnterRule(_localctx, 90, RULE_defaultSwitchLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(DEFAULT);
			State = 528;
			Match(Colon);
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SWITCH) | (1L << CONST) | (1L << BREAK) | (1L << FOR) | (1L << CONTINUE) | (1L << FOREACH) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << THIS) | (1L << THREAD) | (1L << VOID) | (1L << WHILE) | (1L << AUTOPTR) | (1L << REF) | (1L << NULL) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << SUPER) | (1L << GOTO) | (1L << PRIVATE) | (1L << DELETE) | (1L << LOCAL) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Semicolon - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				{
				State = 529;
				statement();
				}
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnScriptParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnScriptParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisedExpressionContext parenthesisedExpression() {
			return GetRuleContext<ParenthesisedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(EnScriptParser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(EnScriptParser.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(EnScriptParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseNot() { return GetToken(EnScriptParser.BitwiseNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(EnScriptParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(EnScriptParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(EnScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(EnScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(EnScriptParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(EnScriptParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(EnScriptParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(EnScriptParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(EnScriptParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(EnScriptParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(EnScriptParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(EnScriptParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inequal() { return GetToken(EnScriptParser.Inequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(EnScriptParser.BitwiseOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(EnScriptParser.BitwiseAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(EnScriptParser.BitwiseXor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalAnd() { return GetToken(EnScriptParser.LogicalAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOr() { return GetToken(EnScriptParser.LogicalOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(EnScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(EnScriptParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract_Assign() { return GetToken(EnScriptParser.Subtract_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply_Assign() { return GetToken(EnScriptParser.Multiply_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide_Assign() { return GetToken(EnScriptParser.Divide_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or_Assign() { return GetToken(EnScriptParser.Or_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And_Assign() { return GetToken(EnScriptParser.And_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LShift_Assign() { return GetToken(EnScriptParser.LShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RShift_Assign() { return GetToken(EnScriptParser.RShift_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(EnScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 536;
				Match(THIS);
				}
				break;
			case 2:
				{
				State = 537;
				Match(SUPER);
				}
				break;
			case 3:
				{
				State = 538;
				primaryExpression();
				}
				break;
			case 4:
				{
				State = 539;
				parenthesisedExpression();
				}
				break;
			case 5:
				{
				State = 540;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (Increment - 50)) | (1L << (Decrement - 50)) | (1L << (BitwiseNot - 50)) | (1L << (Subtract - 50)) | (1L << (Add - 50)) | (1L << (Bang - 50)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 541;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 581;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 544;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 545;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (Multiply - 76)) | (1L << (Divide - 76)) | (1L << (Modulo - 76)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 546;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 547;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 548;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Subtract || _la==Add) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 549;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 550;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 551;
						Match(Greater);
						State = 552;
						Match(Greater);
						State = 553;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 554;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 555;
						Match(Less);
						State = 556;
						Match(Less);
						State = 557;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 558;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 559;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (LessEqual - 60)) | (1L << (GreaterEqual - 60)) | (1L << (Greater - 60)) | (1L << (Less - 60)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 560;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 562;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Inequal || _la==Equal) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 563;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 564;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 565;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (BitwiseOr - 67)) | (1L << (BitwiseXor - 67)) | (1L << (BitwiseAnd - 67)) | (1L << (BitwiseNot - 67)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 566;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 567;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 568;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LogicalOr || _la==LogicalAnd) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 569;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 570;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 571;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & ((1L << (LShift_Assign - 52)) | (1L << (RShift_Assign - 52)) | (1L << (Subtract_Assign - 52)) | (1L << (Add_Assign - 52)) | (1L << (Multiply_Assign - 52)) | (1L << (Divide_Assign - 52)) | (1L << (Or_Assign - 52)) | (1L << (And_Assign - 52)) | (1L << (Assign - 52)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 572;
						expression(1);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 573;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 574;
						_localctx.op = Match(Dot);
						State = 577;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
						case 1:
							{
							State = 575;
							identifier();
							}
							break;
						case 2:
							{
							State = 576;
							functionCall();
							}
							break;
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 579;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 580;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Increment || _la==Decrement) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegatedExpressionContext negatedExpression() {
			return GetRuleContext<NegatedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNumericContext literalNumeric() {
			return GetRuleContext<LiteralNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_primaryExpression);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587;
				objectCreation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 588;
				negatedExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 589;
				identifier();
				State = 591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 590;
					arrayIndex();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 593;
				typeReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 594;
				literalNull();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 595;
				literalBoolean();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 596;
				literalNumeric();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 597;
				literalString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 598;
				literalArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegatedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(EnScriptParser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegatedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negatedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterNegatedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitNegatedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegatedExpressionContext negatedExpression() {
		NegatedExpressionContext _localctx = new NegatedExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_negatedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(Bang);
			State = 602;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParenthesis() { return GetToken(EnScriptParser.LParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParenthesis() { return GetToken(EnScriptParser.RParenthesis, 0); }
		public ParenthesisedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesisedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesisedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisedExpressionContext parenthesisedExpression() {
		ParenthesisedExpressionContext _localctx = new ParenthesisedExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_parenthesisedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(LParenthesis);
			State = 605;
			expression(0);
			State = 606;
			Match(RParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(EnScriptParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(EnScriptParser.RSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 100, RULE_arrayIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(LSBracket);
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << NULL) | (1L << SUPER) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				State = 609;
				expression(0);
				}
			}

			State = 612;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(EnScriptParser.LiteralString, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 102, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(LiteralString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralBoolean() { return GetToken(EnScriptParser.LiteralBoolean, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 104, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(LiteralBoolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(EnScriptParser.NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 106, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(EnScriptParser.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(EnScriptParser.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 108, RULE_literalArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(LCurly);
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << VOID) | (1L << NULL) | (1L << SUPER) | (1L << Increment) | (1L << Decrement))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BitwiseNot - 70)) | (1L << (Subtract - 70)) | (1L << (Add - 70)) | (1L << (LParenthesis - 70)) | (1L << (LCurly - 70)) | (1L << (Bang - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (LiteralString - 70)) | (1L << (LiteralInteger - 70)) | (1L << (LiteralFloat - 70)) | (1L << (LiteralBoolean - 70)))) != 0)) {
				{
				State = 621;
				expression(0);
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 622;
					Match(Comma);
					State = 623;
					expression(0);
					}
					}
					State = 628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 631;
			Match(RCurly);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		public LiteralNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNumericContext literalNumeric() {
		LiteralNumericContext _localctx = new LiteralNumericContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalNumeric);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LiteralFloat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 633;
				literalFloat();
				}
				break;
			case LiteralInteger:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634;
				literalInteger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(EnScriptParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 112, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(EnScriptParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 114, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnScriptParser.VOID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_la = TokenStream.LA(1);
			if ( !(_la==VOID || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnScriptParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext[] genericTypeDeclaration() {
			return GetRuleContexts<GenericTypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeDeclarationContext genericTypeDeclaration(int i) {
			return GetRuleContext<GenericTypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnScriptParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public GenericTypeDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationListContext genericTypeDeclarationList() {
		GenericTypeDeclarationListContext _localctx = new GenericTypeDeclarationListContext(Context, State);
		EnterRule(_localctx, 118, RULE_genericTypeDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(Less);
			State = 644;
			genericTypeDeclaration();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 645;
				Match(Comma);
				State = 646;
				genericTypeDeclaration();
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 652;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeDeclarationContext : ParserRuleContext {
		public IdentifierContext typeName;
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public GenericTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeDeclarationContext genericTypeDeclaration() {
		GenericTypeDeclarationContext _localctx = new GenericTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_genericTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 654;
				variableModifier();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660;
			typeReference();
			State = 661;
			_localctx.typeName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypedReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(EnScriptParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(EnScriptParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(EnScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(EnScriptParser.Comma, i);
		}
		public GenericTypedReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypedReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypedReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypedReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypedReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypedReferenceContext genericTypedReference() {
		GenericTypedReferenceContext _localctx = new GenericTypedReferenceContext(Context, State);
		EnterRule(_localctx, 122, RULE_genericTypedReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(Less);
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 664;
				variableModifier();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 670;
			typeReference();
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 671;
				Match(Comma);
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << AUTOPTR) | (1L << REF) | (1L << NOTNULL) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << OUT) | (1L << PROTECTED) | (1L << INOUT) | (1L << PRIVATE) | (1L << LOCAL))) != 0)) {
					{
					{
					State = 672;
					variableModifier();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 678;
				typeReference();
				}
				}
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 684;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypedReferenceContext genericTypedReference() {
			return GetRuleContext<GenericTypedReferenceContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			identifier();
			State = 688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 687;
				genericTypedReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnScriptParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnScriptParser.SEALED, 0); }
		public TypeModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModifierContext typeModifier() {
		TypeModifierContext _localctx = new TypeModifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_typeModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.LA(1);
			if ( !(_la==MODDED || _la==SEALED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SharedFuncOrVarModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnScriptParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnScriptParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnScriptParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnScriptParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnScriptParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnScriptParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnScriptParser.PROTO, 0); }
		public SharedFuncOrVarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sharedFuncOrVarModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterSharedFuncOrVarModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitSharedFuncOrVarModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSharedFuncOrVarModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SharedFuncOrVarModifiersContext sharedFuncOrVarModifiers() {
		SharedFuncOrVarModifiersContext _localctx = new SharedFuncOrVarModifiersContext(Context, State);
		EnterRule(_localctx, 128, RULE_sharedFuncOrVarModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << PROTO) | (1L << STATIC) | (1L << OWNED) | (1L << REFERENCE) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnScriptParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnScriptParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnScriptParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnScriptParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnScriptParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnScriptParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SharedFuncOrVarModifiersContext sharedFuncOrVarModifiers() {
			return GetRuleContext<SharedFuncOrVarModifiersContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_variableModifier);
		try {
			State = 701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTOPTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				Match(AUTOPTR);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				Match(CONST);
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 696;
				Match(OUT);
				}
				break;
			case NOTNULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 697;
				Match(NOTNULL);
				}
				break;
			case INOUT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 698;
				Match(INOUT);
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 699;
				Match(LOCAL);
				}
				break;
			case REF:
			case PROTO:
			case STATIC:
			case OWNED:
			case REFERENCE:
			case PROTECTED:
			case PRIVATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 700;
				sharedFuncOrVarModifiers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnScriptParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnScriptParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnScriptParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnScriptParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnScriptParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SharedFuncOrVarModifiersContext sharedFuncOrVarModifiers() {
			return GetRuleContext<SharedFuncOrVarModifiersContext>(0);
		}
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnScriptParserListener typedListener = listener as IEnScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnScriptParserVisitor<TResult> typedVisitor = visitor as IEnScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_functionModifier);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERNAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703;
				Match(EXTERNAL);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				Match(OVERRIDE);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 705;
				Match(NATIVE);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 706;
				Match(VOLATILE);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 707;
				Match(EVENT);
				}
				break;
			case REF:
			case PROTO:
			case STATIC:
			case OWNED:
			case REFERENCE:
			case PROTECTED:
			case PRIVATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 708;
				sharedFuncOrVarModifiers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,712,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,5,0,138,8,0,10,0,12,0,141,9,
		0,1,0,1,0,1,1,1,1,1,1,3,1,148,8,1,1,1,1,1,1,1,1,2,3,2,154,8,2,1,2,5,2,
		157,8,2,10,2,12,2,160,9,2,1,2,1,2,3,2,164,8,2,1,2,3,2,167,8,2,1,3,1,3,
		1,3,1,3,5,3,173,8,3,10,3,12,3,176,9,3,1,4,1,4,1,4,3,4,181,8,4,1,4,1,4,
		1,5,1,5,1,5,5,5,188,8,5,10,5,12,5,191,9,5,1,5,5,5,194,8,5,10,5,12,5,197,
		9,5,1,5,3,5,200,8,5,1,6,1,6,1,6,3,6,205,8,6,1,6,1,6,5,6,209,8,6,10,6,12,
		6,212,9,6,1,7,1,7,1,7,3,7,217,8,7,1,7,3,7,220,8,7,1,7,1,7,1,8,1,8,1,8,
		5,8,227,8,8,10,8,12,8,230,9,8,1,8,3,8,233,8,8,1,9,3,9,236,8,9,1,9,1,9,
		3,9,240,8,9,1,10,1,10,3,10,244,8,10,1,11,5,11,247,8,11,10,11,12,11,250,
		9,11,1,11,1,11,1,11,1,11,1,12,1,12,3,12,258,8,12,1,12,1,12,3,12,262,8,
		12,1,13,1,13,5,13,266,8,13,10,13,12,13,269,9,13,1,14,1,14,1,14,1,14,1,
		14,5,14,276,8,14,10,14,12,14,279,9,14,1,15,5,15,282,8,15,10,15,12,15,285,
		9,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,293,8,15,10,15,12,15,296,9,15,
		3,15,298,8,15,1,15,1,15,1,15,3,15,303,8,15,1,15,3,15,306,8,15,1,16,5,16,
		309,8,16,10,16,12,16,312,9,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
		321,8,16,1,17,5,17,324,8,17,10,17,12,17,327,9,17,1,17,1,17,1,17,3,17,332,
		8,17,1,18,1,18,3,18,336,8,18,1,18,1,18,1,19,1,19,3,19,342,8,19,1,19,1,
		19,1,20,1,20,1,21,1,21,5,21,350,8,21,10,21,12,21,353,9,21,1,21,1,21,1,
		22,1,22,1,22,1,23,1,23,3,23,362,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		3,24,371,8,24,1,24,1,24,5,24,375,8,24,10,24,12,24,378,9,24,1,25,1,25,1,
		25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,3,26,397,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,405,8,27,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,29,5,29,416,8,29,10,29,12,29,419,9,29,
		1,29,1,29,1,29,1,29,1,29,3,29,426,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
		31,1,31,1,31,1,31,3,31,438,8,31,1,31,5,31,441,8,31,10,31,12,31,444,9,31,
		1,32,1,32,1,32,1,32,3,32,450,8,32,1,33,1,33,1,33,1,34,1,34,5,34,457,8,
		34,10,34,12,34,460,9,34,1,34,1,34,3,34,464,8,34,1,35,1,35,1,35,1,35,1,
		36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,
		39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,3,42,495,8,42,1,42,
		1,42,1,43,1,43,1,43,1,43,5,43,503,8,43,10,43,12,43,506,9,43,1,43,3,43,
		509,8,43,1,43,5,43,512,8,43,10,43,12,43,515,9,43,1,43,1,43,1,44,1,44,1,
		44,1,44,5,44,523,8,44,10,44,12,44,526,9,44,1,45,1,45,1,45,5,45,531,8,45,
		10,45,12,45,534,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,543,8,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,3,46,578,8,46,1,46,1,46,5,46,582,8,46,10,46,12,
		46,585,9,46,1,47,1,47,1,47,1,47,1,47,3,47,592,8,47,1,47,1,47,1,47,1,47,
		1,47,1,47,3,47,600,8,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,3,
		50,611,8,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,
		5,54,625,8,54,10,54,12,54,628,9,54,3,54,630,8,54,1,54,1,54,1,55,1,55,3,
		55,636,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,5,59,648,
		8,59,10,59,12,59,651,9,59,1,59,1,59,1,60,5,60,656,8,60,10,60,12,60,659,
		9,60,1,60,1,60,1,60,1,61,1,61,5,61,666,8,61,10,61,12,61,669,9,61,1,61,
		1,61,1,61,5,61,674,8,61,10,61,12,61,677,9,61,1,61,5,61,680,8,61,10,61,
		12,61,683,9,61,1,61,1,61,1,62,1,62,3,62,689,8,62,1,63,1,63,1,64,1,64,1,
		65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,702,8,65,1,66,1,66,1,66,1,66,1,66,
		1,66,3,66,710,8,66,1,66,0,1,92,67,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
		118,120,122,124,126,128,130,132,0,13,2,0,8,8,83,83,4,0,50,51,70,70,74,
		75,88,88,2,0,76,77,91,91,1,0,74,75,2,0,60,61,71,72,1,0,63,64,1,0,67,70,
		1,0,65,66,3,0,52,58,62,62,73,73,1,0,50,51,2,0,21,21,92,92,2,0,38,38,40,
		40,4,0,25,25,30,33,35,35,45,45,761,0,139,1,0,0,0,2,144,1,0,0,0,4,153,1,
		0,0,0,6,168,1,0,0,0,8,177,1,0,0,0,10,199,1,0,0,0,12,201,1,0,0,0,14,213,
		1,0,0,0,16,232,1,0,0,0,18,235,1,0,0,0,20,243,1,0,0,0,22,248,1,0,0,0,24,
		255,1,0,0,0,26,267,1,0,0,0,28,270,1,0,0,0,30,283,1,0,0,0,32,310,1,0,0,
		0,34,325,1,0,0,0,36,333,1,0,0,0,38,339,1,0,0,0,40,345,1,0,0,0,42,347,1,
		0,0,0,44,356,1,0,0,0,46,359,1,0,0,0,48,370,1,0,0,0,50,379,1,0,0,0,52,396,
		1,0,0,0,54,404,1,0,0,0,56,406,1,0,0,0,58,417,1,0,0,0,60,427,1,0,0,0,62,
		433,1,0,0,0,64,445,1,0,0,0,66,451,1,0,0,0,68,454,1,0,0,0,70,465,1,0,0,
		0,72,469,1,0,0,0,74,473,1,0,0,0,76,477,1,0,0,0,78,481,1,0,0,0,80,486,1,
		0,0,0,82,489,1,0,0,0,84,492,1,0,0,0,86,498,1,0,0,0,88,518,1,0,0,0,90,527,
		1,0,0,0,92,542,1,0,0,0,94,599,1,0,0,0,96,601,1,0,0,0,98,604,1,0,0,0,100,
		608,1,0,0,0,102,614,1,0,0,0,104,616,1,0,0,0,106,618,1,0,0,0,108,620,1,
		0,0,0,110,635,1,0,0,0,112,637,1,0,0,0,114,639,1,0,0,0,116,641,1,0,0,0,
		118,643,1,0,0,0,120,657,1,0,0,0,122,663,1,0,0,0,124,686,1,0,0,0,126,690,
		1,0,0,0,128,692,1,0,0,0,130,701,1,0,0,0,132,709,1,0,0,0,134,138,3,4,2,
		0,135,138,3,18,9,0,136,138,3,2,1,0,137,134,1,0,0,0,137,135,1,0,0,0,137,
		136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,
		0,0,0,141,139,1,0,0,0,142,143,5,0,0,1,143,1,1,0,0,0,144,145,5,37,0,0,145,
		147,3,124,62,0,146,148,3,100,50,0,147,146,1,0,0,0,147,148,1,0,0,0,148,
		149,1,0,0,0,149,150,3,116,58,0,150,151,5,84,0,0,151,3,1,0,0,0,152,154,
		3,50,25,0,153,152,1,0,0,0,153,154,1,0,0,0,154,158,1,0,0,0,155,157,3,126,
		63,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,
		163,1,0,0,0,160,158,1,0,0,0,161,164,3,14,7,0,162,164,3,8,4,0,163,161,1,
		0,0,0,163,162,1,0,0,0,164,166,1,0,0,0,165,167,5,84,0,0,166,165,1,0,0,0,
		166,167,1,0,0,0,167,5,1,0,0,0,168,169,7,0,0,0,169,174,3,124,62,0,170,171,
		5,82,0,0,171,173,3,124,62,0,172,170,1,0,0,0,173,176,1,0,0,0,174,172,1,
		0,0,0,174,175,1,0,0,0,175,7,1,0,0,0,176,174,1,0,0,0,177,178,5,6,0,0,178,
		180,3,116,58,0,179,181,3,6,3,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,
		1,0,0,0,182,183,3,10,5,0,183,9,1,0,0,0,184,200,3,12,6,0,185,189,5,80,0,
		0,186,188,3,12,6,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,
		190,1,0,0,0,190,195,1,0,0,0,191,189,1,0,0,0,192,194,5,82,0,0,193,192,1,
		0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,
		197,195,1,0,0,0,198,200,5,81,0,0,199,184,1,0,0,0,199,185,1,0,0,0,200,11,
		1,0,0,0,201,204,3,116,58,0,202,203,5,73,0,0,203,205,3,92,46,0,204,202,
		1,0,0,0,204,205,1,0,0,0,205,210,1,0,0,0,206,207,5,82,0,0,207,209,3,12,
		6,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
		13,1,0,0,0,212,210,1,0,0,0,213,214,5,5,0,0,214,216,3,116,58,0,215,217,
		3,118,59,0,216,215,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,220,3,6,
		3,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,3,16,8,0,222,
		15,1,0,0,0,223,233,3,20,10,0,224,228,5,80,0,0,225,227,3,20,10,0,226,225,
		1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,
		0,230,228,1,0,0,0,231,233,5,81,0,0,232,223,1,0,0,0,232,224,1,0,0,0,233,
		17,1,0,0,0,234,236,3,50,25,0,235,234,1,0,0,0,235,236,1,0,0,0,236,239,1,
		0,0,0,237,240,3,30,15,0,238,240,3,22,11,0,239,237,1,0,0,0,239,238,1,0,
		0,0,240,19,1,0,0,0,241,244,3,18,9,0,242,244,3,32,16,0,243,241,1,0,0,0,
		243,242,1,0,0,0,244,21,1,0,0,0,245,247,3,130,65,0,246,245,1,0,0,0,247,
		250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,
		0,0,0,251,252,3,124,62,0,252,253,3,24,12,0,253,254,5,84,0,0,254,23,1,0,
		0,0,255,257,3,116,58,0,256,258,3,100,50,0,257,256,1,0,0,0,257,258,1,0,
		0,0,258,261,1,0,0,0,259,262,3,28,14,0,260,262,3,26,13,0,261,259,1,0,0,
		0,261,260,1,0,0,0,262,25,1,0,0,0,263,264,5,82,0,0,264,266,3,26,13,0,265,
		263,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,27,1,0,
		0,0,269,267,1,0,0,0,270,271,5,73,0,0,271,272,3,92,46,0,272,277,1,0,0,0,
		273,274,5,82,0,0,274,276,3,28,14,0,275,273,1,0,0,0,276,279,1,0,0,0,277,
		275,1,0,0,0,277,278,1,0,0,0,278,29,1,0,0,0,279,277,1,0,0,0,280,282,3,132,
		66,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,
		286,1,0,0,0,285,283,1,0,0,0,286,287,3,124,62,0,287,288,3,116,58,0,288,
		297,5,78,0,0,289,294,3,34,17,0,290,291,5,82,0,0,291,293,3,34,17,0,292,
		290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,298,1,
		0,0,0,296,294,1,0,0,0,297,289,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,
		299,305,5,79,0,0,300,302,3,40,20,0,301,303,5,84,0,0,302,301,1,0,0,0,302,
		303,1,0,0,0,303,306,1,0,0,0,304,306,5,84,0,0,305,300,1,0,0,0,305,304,1,
		0,0,0,306,31,1,0,0,0,307,309,3,132,66,0,308,307,1,0,0,0,309,312,1,0,0,
		0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,
		314,3,124,62,0,314,315,5,70,0,0,315,316,3,116,58,0,316,317,5,78,0,0,317,
		318,5,79,0,0,318,320,3,40,20,0,319,321,5,84,0,0,320,319,1,0,0,0,320,321,
		1,0,0,0,321,33,1,0,0,0,322,324,3,130,65,0,323,322,1,0,0,0,324,327,1,0,
		0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,
		331,3,124,62,0,329,332,3,38,19,0,330,332,3,36,18,0,331,329,1,0,0,0,331,
		330,1,0,0,0,332,35,1,0,0,0,333,335,3,116,58,0,334,336,3,100,50,0,335,334,
		1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,3,28,14,0,338,37,1,0,0,
		0,339,341,3,116,58,0,340,342,3,100,50,0,341,340,1,0,0,0,341,342,1,0,0,
		0,342,343,1,0,0,0,343,344,3,26,13,0,344,39,1,0,0,0,345,346,3,52,26,0,346,
		41,1,0,0,0,347,351,5,80,0,0,348,350,3,52,26,0,349,348,1,0,0,0,350,353,
		1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,
		0,354,355,5,81,0,0,355,43,1,0,0,0,356,357,3,116,58,0,357,358,3,46,23,0,
		358,45,1,0,0,0,359,361,5,78,0,0,360,362,3,48,24,0,361,360,1,0,0,0,361,
		362,1,0,0,0,362,363,1,0,0,0,363,364,5,79,0,0,364,47,1,0,0,0,365,366,3,
		116,58,0,366,367,5,83,0,0,367,368,3,92,46,0,368,371,1,0,0,0,369,371,3,
		92,46,0,370,365,1,0,0,0,370,369,1,0,0,0,371,376,1,0,0,0,372,373,5,82,0,
		0,373,375,3,48,24,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,
		377,1,0,0,0,377,49,1,0,0,0,378,376,1,0,0,0,379,380,5,85,0,0,380,381,3,
		44,22,0,381,382,5,86,0,0,382,51,1,0,0,0,383,397,3,54,27,0,384,397,3,76,
		38,0,385,397,3,72,36,0,386,397,3,74,37,0,387,397,3,64,32,0,388,397,3,60,
		30,0,389,397,3,56,28,0,390,397,3,80,40,0,391,397,3,82,41,0,392,397,3,84,
		42,0,393,397,3,86,43,0,394,397,3,78,39,0,395,397,3,70,35,0,396,383,1,0,
		0,0,396,384,1,0,0,0,396,385,1,0,0,0,396,386,1,0,0,0,396,387,1,0,0,0,396,
		388,1,0,0,0,396,389,1,0,0,0,396,390,1,0,0,0,396,391,1,0,0,0,396,392,1,
		0,0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,53,1,0,0,0,398,
		399,3,92,46,0,399,400,5,84,0,0,400,405,1,0,0,0,401,405,3,42,21,0,402,405,
		3,22,11,0,403,405,5,84,0,0,404,398,1,0,0,0,404,401,1,0,0,0,404,402,1,0,
		0,0,404,403,1,0,0,0,405,55,1,0,0,0,406,407,5,15,0,0,407,408,5,78,0,0,408,
		409,3,58,29,0,409,410,5,83,0,0,410,411,3,92,46,0,411,412,5,79,0,0,412,
		413,3,40,20,0,413,57,1,0,0,0,414,416,3,130,65,0,415,414,1,0,0,0,416,419,
		1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,
		0,420,421,3,124,62,0,421,422,3,116,58,0,422,425,3,100,50,0,423,424,5,82,
		0,0,424,426,3,58,29,0,425,423,1,0,0,0,425,426,1,0,0,0,426,59,1,0,0,0,427,
		428,5,13,0,0,428,429,5,78,0,0,429,430,3,62,31,0,430,431,5,79,0,0,431,432,
		3,40,20,0,432,61,1,0,0,0,433,434,3,52,26,0,434,435,3,92,46,0,435,437,5,
		84,0,0,436,438,3,92,46,0,437,436,1,0,0,0,437,438,1,0,0,0,438,442,1,0,0,
		0,439,441,5,84,0,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,
		443,1,0,0,0,443,63,1,0,0,0,444,442,1,0,0,0,445,446,5,16,0,0,446,447,3,
		98,49,0,447,449,3,40,20,0,448,450,3,66,33,0,449,448,1,0,0,0,449,450,1,
		0,0,0,450,65,1,0,0,0,451,452,5,12,0,0,452,453,3,40,20,0,453,67,1,0,0,0,
		454,458,5,17,0,0,455,457,3,130,65,0,456,455,1,0,0,0,457,460,1,0,0,0,458,
		456,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,463,3,
		124,62,0,462,464,3,46,23,0,463,462,1,0,0,0,463,464,1,0,0,0,464,69,1,0,
		0,0,465,466,5,22,0,0,466,467,3,98,49,0,467,468,3,40,20,0,468,71,1,0,0,
		0,469,470,5,20,0,0,470,471,3,44,22,0,471,472,5,84,0,0,472,73,1,0,0,0,473,
		474,5,44,0,0,474,475,3,92,46,0,475,476,5,84,0,0,476,75,1,0,0,0,477,478,
		5,47,0,0,478,479,3,92,46,0,479,480,5,84,0,0,480,77,1,0,0,0,481,482,3,124,
		62,0,482,483,3,116,58,0,483,484,3,46,23,0,484,485,5,84,0,0,485,79,1,0,
		0,0,486,487,5,10,0,0,487,488,5,84,0,0,488,81,1,0,0,0,489,490,5,14,0,0,
		490,491,5,84,0,0,491,83,1,0,0,0,492,494,5,18,0,0,493,495,3,92,46,0,494,
		493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,5,84,0,0,497,85,1,
		0,0,0,498,499,5,7,0,0,499,500,3,98,49,0,500,504,5,80,0,0,501,503,3,88,
		44,0,502,501,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,
		508,1,0,0,0,506,504,1,0,0,0,507,509,3,90,45,0,508,507,1,0,0,0,508,509,
		1,0,0,0,509,513,1,0,0,0,510,512,3,88,44,0,511,510,1,0,0,0,512,515,1,0,
		0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,
		517,5,81,0,0,517,87,1,0,0,0,518,519,5,11,0,0,519,520,3,92,46,0,520,524,
		5,83,0,0,521,523,3,52,26,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,0,
		0,0,524,525,1,0,0,0,525,89,1,0,0,0,526,524,1,0,0,0,527,528,5,49,0,0,528,
		532,5,83,0,0,529,531,3,52,26,0,530,529,1,0,0,0,531,534,1,0,0,0,532,530,
		1,0,0,0,532,533,1,0,0,0,533,91,1,0,0,0,534,532,1,0,0,0,535,536,6,46,-1,
		0,536,543,5,19,0,0,537,543,5,42,0,0,538,543,3,94,47,0,539,543,3,98,49,
		0,540,541,7,1,0,0,541,543,3,92,46,10,542,535,1,0,0,0,542,537,1,0,0,0,542,
		538,1,0,0,0,542,539,1,0,0,0,542,540,1,0,0,0,543,583,1,0,0,0,544,545,10,
		9,0,0,545,546,7,2,0,0,546,582,3,92,46,10,547,548,10,8,0,0,548,549,7,3,
		0,0,549,582,3,92,46,9,550,551,10,7,0,0,551,552,5,71,0,0,552,553,5,71,0,
		0,553,582,3,92,46,8,554,555,10,6,0,0,555,556,5,72,0,0,556,557,5,72,0,0,
		557,582,3,92,46,7,558,559,10,5,0,0,559,560,7,4,0,0,560,582,3,92,46,6,561,
		562,10,4,0,0,562,563,7,5,0,0,563,582,3,92,46,5,564,565,10,3,0,0,565,566,
		7,6,0,0,566,582,3,92,46,4,567,568,10,2,0,0,568,569,7,7,0,0,569,582,3,92,
		46,3,570,571,10,1,0,0,571,572,7,8,0,0,572,582,3,92,46,1,573,574,10,12,
		0,0,574,577,5,87,0,0,575,578,3,116,58,0,576,578,3,44,22,0,577,575,1,0,
		0,0,577,576,1,0,0,0,578,582,1,0,0,0,579,580,10,11,0,0,580,582,7,9,0,0,
		581,544,1,0,0,0,581,547,1,0,0,0,581,550,1,0,0,0,581,554,1,0,0,0,581,558,
		1,0,0,0,581,561,1,0,0,0,581,564,1,0,0,0,581,567,1,0,0,0,581,570,1,0,0,
		0,581,573,1,0,0,0,581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,
		584,1,0,0,0,584,93,1,0,0,0,585,583,1,0,0,0,586,600,3,44,22,0,587,600,3,
		68,34,0,588,600,3,96,48,0,589,591,3,116,58,0,590,592,3,100,50,0,591,590,
		1,0,0,0,591,592,1,0,0,0,592,600,1,0,0,0,593,600,3,124,62,0,594,600,3,106,
		53,0,595,600,3,104,52,0,596,600,3,110,55,0,597,600,3,102,51,0,598,600,
		3,108,54,0,599,586,1,0,0,0,599,587,1,0,0,0,599,588,1,0,0,0,599,589,1,0,
		0,0,599,593,1,0,0,0,599,594,1,0,0,0,599,595,1,0,0,0,599,596,1,0,0,0,599,
		597,1,0,0,0,599,598,1,0,0,0,600,95,1,0,0,0,601,602,5,88,0,0,602,603,3,
		92,46,0,603,97,1,0,0,0,604,605,5,78,0,0,605,606,3,92,46,0,606,607,5,79,
		0,0,607,99,1,0,0,0,608,610,5,85,0,0,609,611,3,92,46,0,610,609,1,0,0,0,
		610,611,1,0,0,0,611,612,1,0,0,0,612,613,5,86,0,0,613,101,1,0,0,0,614,615,
		5,95,0,0,615,103,1,0,0,0,616,617,5,98,0,0,617,105,1,0,0,0,618,619,5,26,
		0,0,619,107,1,0,0,0,620,629,5,80,0,0,621,626,3,92,46,0,622,623,5,82,0,
		0,623,625,3,92,46,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,
		627,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,629,621,1,0,0,0,629,630,1,
		0,0,0,630,631,1,0,0,0,631,632,5,81,0,0,632,109,1,0,0,0,633,636,3,112,56,
		0,634,636,3,114,57,0,635,633,1,0,0,0,635,634,1,0,0,0,636,111,1,0,0,0,637,
		638,5,97,0,0,638,113,1,0,0,0,639,640,5,96,0,0,640,115,1,0,0,0,641,642,
		7,10,0,0,642,117,1,0,0,0,643,644,5,72,0,0,644,649,3,120,60,0,645,646,5,
		82,0,0,646,648,3,120,60,0,647,645,1,0,0,0,648,651,1,0,0,0,649,647,1,0,
		0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,649,1,0,0,0,652,653,5,71,0,0,653,
		119,1,0,0,0,654,656,3,130,65,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,
		1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,3,124,
		62,0,661,662,3,116,58,0,662,121,1,0,0,0,663,667,5,72,0,0,664,666,3,130,
		65,0,665,664,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
		670,1,0,0,0,669,667,1,0,0,0,670,681,3,124,62,0,671,675,5,82,0,0,672,674,
		3,130,65,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,
		0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,680,3,124,62,0,679,671,1,0,0,0,
		680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,681,
		1,0,0,0,684,685,5,71,0,0,685,123,1,0,0,0,686,688,3,116,58,0,687,689,3,
		122,61,0,688,687,1,0,0,0,688,689,1,0,0,0,689,125,1,0,0,0,690,691,7,11,
		0,0,691,127,1,0,0,0,692,693,7,12,0,0,693,129,1,0,0,0,694,702,5,23,0,0,
		695,702,5,9,0,0,696,702,5,34,0,0,697,702,5,27,0,0,698,702,5,41,0,0,699,
		702,5,48,0,0,700,702,3,128,64,0,701,694,1,0,0,0,701,695,1,0,0,0,701,696,
		1,0,0,0,701,697,1,0,0,0,701,698,1,0,0,0,701,699,1,0,0,0,701,700,1,0,0,
		0,702,131,1,0,0,0,703,710,5,46,0,0,704,710,5,39,0,0,705,710,5,28,0,0,706,
		710,5,29,0,0,707,710,5,36,0,0,708,710,3,128,64,0,709,703,1,0,0,0,709,704,
		1,0,0,0,709,705,1,0,0,0,709,706,1,0,0,0,709,707,1,0,0,0,709,708,1,0,0,
		0,710,133,1,0,0,0,74,137,139,147,153,158,163,166,174,180,189,195,199,204,
		210,216,219,228,232,235,239,243,248,257,261,267,277,283,294,297,302,305,
		310,320,325,331,335,341,351,361,370,376,396,404,417,425,437,442,449,458,
		463,494,504,508,513,524,532,542,577,581,583,591,599,610,626,629,635,649,
		657,667,675,681,688,701,709
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
